# Gerekli modüllerin içe aktarılması:
import subprocess  # Dış komutları çalıştırmak için kullanılır. Örneğin, pip komutlarını terminalde çalıştırır.
import sys         # Python yorumlayıcısı hakkında bilgi sağlar. Özellikle, sistemle ilgili parametreleri almak için kullanılır.

# Kullanılması gereken kütüphanelerin listesini tanımlıyoruz.
required_libraries = [
    "tkinter",       # Grafiksel kullanıcı arayüzü oluşturmak için temel modül.
    "cryptography",  # Şifreleme işlemleri ve kriptografik fonksiyonlar için kullanılır.
    "io"             # Giriş/çıkış işlemlerini kolaylaştırmak için kullanılan modül.
]

# Aşağıdaki fonksiyon, gerekli kütüphanelerin yüklü olup olmadığını kontrol eder,
# eğer yüklü değilse pip ile yüklemeye çalışır.
def check_and_install_libraries():
    # listedeki her bir kütüphane için döngüye giriyoruz.
    for library in required_libraries:
        try:
            # __import__ fonksiyonu, kütüphanenin import edilip edilemeyeceğini kontrol eder.
            __import__(library)
        except ImportError:
            # Eğer ImportError hatası alınırsa, kütüphane sistemde yüklü değildir.
            print(f"'{library}' kütüphanesi bulunamadı. Yükleniyor...")
            # pip modülü kullanılarak kütüphanenin yüklenmesi sağlanır.
            subprocess.check_call([sys.executable, "-m", "pip", "install", library])
            print(f"'{library}' kütüphanesi başarıyla yüklendi.")
        else:
            # Eğer herhangi bir hata oluşmazsa, kütüphane zaten yüklü demektir.
            print(f"'{library}' kütüphanesi zaten yüklü.")

# Program çalışmaya başlamadan önce gerekli kütüphanelerin yüklü olup olmadığını kontrol ediyoruz.
check_and_install_libraries()

# Artık programın devamında kullanacağımız diğer modülleri içe aktarıyoruz:
from tkinter import *            # Tkinter modülündeki tüm sınıfları ve fonksiyonları import eder.
from tkinter import messagebox   # Kullanıcıya mesaj kutuları göstermek için kullanılan modül.
from cryptography.fernet import Fernet  # Fernet, simetrik şifreleme algoritmasını sağlar.
from cryptography.hazmat.primitives import hashes  # Hash algoritmaları ve sabit fonksiyonlar içerir.
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC  # PBKDF2 anahtar türetme algoritmasını sağlar.
import os         # Dosya ve dizin işlemleri için kullanılır.
import base64     # Binary verileri Base64 formatına dönüştürmek veya çözmek için kullanılır.

# Şifrelenmiş veriler ve ilgili anahtarlar için kullanılacak dosya isimlerinin tanımlanması:
SECRET_FILE = "mysecret.txt"  # Şifrelenmiş mesajların saklanacağı dosya.
KEY_FILE = "key.key"          # Şifreleme anahtarlarının saklanacağı dosya.

# Global değişkenlerin tanımlanması:
title_input = None         # Kullanıcının başlık bilgisini gireceği Entry widget'ını tutacak.
secret_input_text = None   # Kullanıcının gizli mesajını gireceği Text widget'ını tutacak.
master_key_input = None    # Kullanıcının şifre (master key) bilgisini gireceği Entry widget'ını tutacak.
decrypted_text = None      # Şifre çözüldükten sonra elde edilecek metni saklamak için tanımlandı.

# Tkinter ile ana pencere (GUI) oluşturuluyor:
window = Tk()  # Tk() fonksiyonu ile yeni bir pencere nesnesi oluşturulur.
window.title("Secret Notes")  # Pencerenin başlık çubuğunda görünecek yazıyı ayarlar.
window.geometry("360x550")  # Pencerenin genişlik ve yükseklik boyutlarını piksel cinsinden belirler.
window.config(pady=15)       # Pencerenin tüm kenarlarında dikey boşluk (padding) ayarlanır.

# Logo resmi için Base64 formatında bir string tanımlanır. (Uzun olduğu için örnekte basitleştirilmiştir)
logo_base64 = """

"""
# Base64 formatındaki logoyu, orijinal binary veriye dönüştürüyoruz.
logo_data = base64.b64decode(logo_base64)
# Tkinter'ın PhotoImage sınıfını kullanarak binary veriden bir resim nesnesi oluşturulur.
logo_image = PhotoImage(data=logo_data)
# Oluşturulan resim, pencerenin içinde bir Label widget ile görüntülenir.
logo_label = Label(window, image=logo_image)
logo_label.pack()  # pack() metodu ile label widget'ı pencereye yerleştirilir.

# Aşağıdaki fonksiyon, verilen metni ve kullanıcı tarafından girilen şifreyi kullanarak simetrik şifreleme yapar.
def encrypt(text, password):
    # Güvenlik amacıyla kullanılan salt değeri. Gerçek projelerde bu değerin rastgele ve benzersiz olması önerilir.
    salt = b"0123456789abcdef0123456789abcdef"
    # PBKDF2HMAC algoritması ile anahtar türetme işlemi gerçekleştirilir.
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),  # SHA256 hash algoritması kullanılır.
        length=32,                  # 32 bayt uzunluğunda anahtar üretilir.
        salt=salt,                  # Belirlenen salt değeri kullanılır.
        iterations=1200000,         # Anahtar türetme işlemi için iterasyon sayısı (yüksek iterasyon daha güvenlidir).
    )
    # Kullanıcının şifresinden byte formatında anahtar türetilir ve ardından url-safe base64 formatına çevrilir.
    key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
    # Fernet sınıfı, türetilen anahtar kullanılarak simetrik şifreleme için nesne oluşturur.
    f = Fernet(key)
    # Verilen metin önce byte formatına çevrilir, ardından şifrelenir.
    token = f.encrypt(text.encode())
    # Fonksiyon, şifrelenmiş metni (token) ve kullanılan anahtarı döndürür.
    return token, key

# Belirtilen dosyanın mevcut olup olmadığını kontrol eden ve yoksa yeni dosya oluşturan fonksiyon.
def file_control(file_name):
    # os.path.exists fonksiyonu ile dosyanın var olup olmadığı kontrol edilir.
    if not os.path.exists(file_name):
        # Dosya mevcut değilse, "w" (write) modu ile dosya oluşturulur.
        with open(file_name, "w", encoding="utf-8") as f:
            pass  # Dosya oluşturulur, içeriği boş bırakılır.

# Kullanıcı arayüzünü (GUI) oluşturan ve widget'ları yerleştiren fonksiyon.
def Startup():
    global title_input, secret_input_text, master_key_input  # Global değişkenler kullanacağımız için tanımlıyoruz.

    # Başlık girişi için açıklama metni (Label) oluşturulup pencereye ekleniyor.
    Label(window, text="Enter your title", font=("Arial", 12)).pack(pady=(25, 5))
    # Kullanıcının başlık bilgisini gireceği Entry widget'ı oluşturuluyor.
    title_input = Entry(window)
    title_input.pack()

    # Gizli mesaj girişi için Label oluşturuluyor.
    Label(window, text="Enter your secret", font=("Arial", 12)).pack(pady=(10, 5))
    # Kullanıcının birden fazla satır metin girmesine izin veren Text widget'ı oluşturuluyor.
    secret_input_text = Text(window, width=33, height=12)
    secret_input_text.pack()

    # Anahtar (şifre) girişi için Label oluşturuluyor.
    Label(window, text="Enter your master key", font=("Arial", 12)).pack(pady=(10, 5))
    # Şifrelerin ekranda görünmemesi için "show" parametresi ile '*' karakteri kullanılıyor.
    master_key_input = Entry(window, show="*")
    master_key_input.pack()

    # Kullanıcının girdiği veriyi şifreleyip kaydetmek için buton ekleniyor.
    Button(text="Save & Encrypt", command=Save_encrypt).pack(pady=(5, 0))
    # Şifre çözme işlemini başlatmak için ayrı bir buton ekleniyor.
    Button(text="Decrypt", command=decrypt).pack(pady=(5, 0))

# Kullanıcının girdiği başlık, gizli mesaj ve ana şifreyi alarak şifreleme işlemini yapan ve dosyalara kaydeden fonksiyon.
def Save_encrypt():
    global title_input, secret_input_text, master_key_input

    # Anahtar ve şifreli mesajın saklanacağı dosyaların varlığını kontrol eder, yoksa oluşturur.
    file_control(KEY_FILE)
    file_control(SECRET_FILE)

    # Kullanıcının girdiği başlığı, gizli mesajı ve ana şifreyi alır, boşlukları temizler.
    user_title = title_input.get().strip()
    user_secret = secret_input_text.get("1.0", "end-1c").strip()  # Text widget'tan tüm metni alır.
    user_password = master_key_input.get().strip()

    # Eğer başlık, gizli mesaj veya şifre boş ise hata mesajı gösterip işlemi sonlandırır.
    if not user_title:
        messagebox.showerror("Hata", "Başlık boş olamaz!")
        return
    if not user_secret:
        messagebox.showerror("Hata", "Gizli mesaj boş olamaz!")
        return
    if not user_password:
        messagebox.showerror("Hata", "Şifre boş olamaz!")
        return

    # SECRET_FILE dosyasını okur ve halihazırda kaydedilmiş verileri satır satır alır.
    with open(SECRET_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # Dosyada her iki satırda bir başlık kaydı yapıldığını varsayarak, mevcut başlıkları bir küme içine toplar.
    existing_titles = {lines[i].strip() for i in range(0, len(lines), 2)}

    # Girilen başlığın daha önce kullanılıp kullanılmadığını kontrol eder.
    if user_title in existing_titles:
        messagebox.showerror("Hata", "Bu başlık zaten mevcut! Lütfen farklı bir başlık seçin.")
        return

    # Kullanıcının gizli mesajını ve şifresini kullanarak şifreleme işlemini gerçekleştirir.
    # Şifrelenmiş metin (token) ve türetilen anahtar alınır.
    secret_text, secret_key = encrypt(user_secret, user_password)

    # Şifrelenmiş metni, başlık ile birlikte SECRET_FILE dosyasının sonuna ekler.
    with open(SECRET_FILE, "a", encoding="utf-8") as f:
        f.write(f"{user_title}\n{secret_text.decode()}\n")

    # Türetilen anahtarı, başlık ile birlikte KEY_FILE dosyasına "başlık:anahtar" formatında ekler.
    with open(KEY_FILE, "a", encoding="utf-8") as f:
        f.write(f"{user_title}:{secret_key.decode()}\n")

    # Kullanıcının veri girişi yaptığı alanları temizler.
    title_input.delete(0, "end")
    secret_input_text.delete("1.0", "end")
    master_key_input.delete(0, "end")

    # İşlemin başarılı olduğunu kullanıcıya bilgi mesajı ile bildirir.
    messagebox.showinfo("Başarılı", "Şifreleme tamamlandı ve kaydedildi.")

# Girilen başlık ve ana şifre bilgilerini kullanarak şifrelenmiş metni çözmeye yarayan fonksiyon.
def decrypt():
    global title_input, secret_input_text, master_key_input

    # Kullanıcının girdiği başlık ve ana şifre alınır ve boşluklar temizlenir.
    user_title = title_input.get().strip()
    user_password = master_key_input.get().strip()

    # Eğer başlık veya şifre boş ise hata mesajı gösterilir.
    if not user_title:
        messagebox.showerror("Hata", "Başlık boş olamaz!")
        return
    if not user_password:
        messagebox.showerror("Hata", "Şifre boş olamaz!")
        return

    # SECRET_FILE dosyası açılarak tüm satırlar okunur.
    with open(SECRET_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # Girilen başlığa ait şifrelenmiş metni bulmak için satırlar arasında döngü oluşturulur.
    encrypted_text = None
    for i in range(len(lines)):
        if lines[i].strip() == user_title:  # Satırdaki metin girilen başlıkla eşleşiyorsa,
            encrypted_text = lines[i + 1].strip()  # Bir sonraki satır şifreli metni içermektedir.
            break

    # Eğer aranan başlık bulunamadıysa kullanıcıya hata mesajı gösterilir.
    if encrypted_text is None:
        messagebox.showerror("Hata", "Başlık bulunamadı!")
        return

    # KEY_FILE dosyasını açıp, her satırdaki "başlık:anahtar" çiftini kontrol eder.
    with open(KEY_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()

    stored_key_base64 = None  # Bulunan anahtar burada saklanacak.
    for line in lines:
        # Satırda ':' karakteri varsa, başlık ve anahtar bilgisi ayrılır.
        if ':' in line:
            stored_title, stored_key = line.strip().split(":")
            # Eğer dosyadaki başlık, kullanıcının girdiği başlıkla eşleşiyorsa, anahtarı alır.
            if stored_title == user_title:
                stored_key_base64 = stored_key
                break

    # Eğer ilgili başlık için anahtar bulunamazsa hata mesajı gösterilir.
    if stored_key_base64 is None:
        messagebox.showerror("Hata", "Anahtar bulunamadı!")
        return

    # Kullanıcının girdiği şifreyi kullanarak aynı salt ve PBKDF2HMAC ayarları ile anahtar türetilir.
    salt = b"0123456789abcdef0123456789abcdef"
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=1200000,
    )
    # Türetilen anahtar base64 formatında kodlanır.
    derived_key = base64.urlsafe_b64encode(kdf.derive(user_password.encode()))

    # Türetilen anahtar ile dosyada saklanan anahtar karşılaştırılır.
    if derived_key.decode() != stored_key_base64:
        messagebox.showerror("Hata", "Hatalı şifre! Şifre çözme başarısız.")
        return

    try:
        # Fernet nesnesi oluşturulur, şifre çözme işlemi için türetilen anahtar kullanılır.
        fernet = Fernet(derived_key)
        # Şifrelenmiş metin, önce byte formatına çevrilir ve ardından çözülür.
        decrypted_text = fernet.decrypt(encrypted_text.encode()).decode()
        # Text widget'taki mevcut metin temizlenir.
        secret_input_text.delete("1.0", "end")
        # Çözülen metin, Text widget'ına eklenir.
        secret_input_text.insert("1.0", decrypted_text)

        # Kullanıcıya şifre çözme işleminin başarılı olduğuna dair bilgi verilir.
        messagebox.showinfo("Başarılı", "Şifre başarıyla çözüldü.\n15sn sonra silinecektir.")

        # Başlık ve şifre giriş alanları temizlenir.
        title_input.delete(0, "end")
        master_key_input.delete(0, "end")
        # 15 saniye sonra, Text widget'taki çözülen metni silmek için zamanlayıcı ayarlanır.
        window.after(15000, lambda: secret_input_text.delete("1.0", "end"))

    except Exception as e:
        # Eğer herhangi bir hata oluşursa, kullanıcıya hata mesajı gösterilir.
        messagebox.showerror("Hata", f"Şifre çözme başarısız oldu!\nHata: {str(e)}")

# Uygulamanın başlangıç fonksiyonu çağrılır. Bu, GUI elemanlarını oluşturur ve düzenler.
Startup()
# Tkinter ana döngüsü başlatılır; bu döngü pencerede yapılan tüm kullanıcı etkileşimlerini dinler.
window.mainloop()
